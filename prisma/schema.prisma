// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String        @unique
  password          String
  image             String?
  role              Role          @default(USER)
  twoFactorEnabled  Boolean       @default(false)
  twoFactorSecret   String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  accounts          Account[]
  sessions          Session[]
  apiKeys           ApiKey[]
  securityLogs      SecurityLog[]
  notifications     Notification[]
  settings          UserSettings?
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model SecurityLog {
  id        String   @id @default(cuid())
  action    String
  details   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model UserSettings {
  id                    String   @id @default(cuid())
  emailNotifications    Boolean  @default(true)
  securityAlerts        Boolean  @default(true)
  systemUpdates         Boolean  @default(true)
  profileVisibility     Boolean  @default(true)
  activityStatus        Boolean  @default(false)
  dataCollection        Boolean  @default(true)
  theme                 String   @default("system")
  fontSize              String   @default("medium")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
